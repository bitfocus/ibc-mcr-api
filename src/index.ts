// Filename: index.ts
import "zod-openapi/extend"; // Must be at the top
import { createDocument } from "zod-openapi";
import express, { type Application } from "express";
import swaggerUi from "swagger-ui-express";

// Import our route helpers and routes
import { createRouterAndApiPaths } from "./utils/route-helpers";
import { routes } from "./routes";
import { prisma } from "./utils/prisma";

// Import schemas for OpenAPI components
import {
	eventIdRef,
	titleRef,
	sourceIdRef,
	sourceLabelRef,
	destinationIdRef,
	destinationLabelRef,
	eventResponseRef,
	errorResponseRef,
	notFoundResponseRef,
	eventIdSchema,
	titleSchema,
	sourceIdSchema,
	sourceLabelSchema,
	destinationIdSchema,
	destinationLabelSchema,
	sourceSchema,
	destinationSchema,
	eventSuccessResponseSchema,
	errorSchema,
	notFoundSchema,
} from "./schemas";

const app: Application = express();
app.use(express.json()); // Middleware to parse JSON request bodies

// --- Create Router and OpenAPI Path definitions from our route configs ---
// @ts-ignore - We're mixing different route types, but the function can handle it
const { router: apiRouter, openApiPaths } = createRouterAndApiPaths(routes);

// Mount the generated API router (e.g., under a /api/v1 prefix)
app.use("/api/v1", apiRouter);

// --- Generate the OpenAPI Document ---
const document = createDocument({
	openapi: "3.1.0",
	info: {
		title: "IBC MCR Accelerator API",
		version: "0.0.1",
		description: "API Specification for the IBC MCR Accelerator",
	},
	paths: openApiPaths, // Use the paths generated by createRouterAndApiPaths
	components: {
		schemas: {
			// List all schemas that have a `.openapi({ ref: "..." })`
			[eventIdRef]: eventIdSchema,
			[titleRef]: titleSchema,
			[sourceIdRef]: sourceIdSchema,
			[sourceLabelRef]: sourceLabelSchema,
			[destinationIdRef]: destinationIdSchema,
			[destinationLabelRef]: destinationLabelSchema,
			[eventResponseRef]: eventSuccessResponseSchema,
			[errorResponseRef]: errorSchema,
			[notFoundResponseRef]: notFoundSchema,
			// Add any other globally referenced schemas here
		},
		// You can also define securitySchemes, parameters, etc. here
		// securitySchemes: { BasicAuth: { type: 'http', scheme: 'basic' } }
	},
	// Define servers to specify the API base path
	servers: [{ url: "/api/v1", description: "Main API" }],
});

// --- Serve Swagger UI Documentation ---
app.use("/docs", swaggerUi.serve, swaggerUi.setup(document));

// Function to seed the database if it's empty
async function seedDatabaseIfEmpty() {
	try {
		// Check if there are any events in the database
		const eventCount = await prisma.event.count();
		
		if (eventCount === 0) {
			console.log('Database is empty. Seeding with initial data...');
			
			// Create a sample event
			const event = await prisma.event.create({
				data: {
					title: 'Sample Event',
					sources: {
						create: [
							{
								label: 'Main Camera',
							}
						]
					},
					destinations: {
						create: [
							{
								label: 'Output Stream 1',
							}
						]
					}
				},
				include: {
					sources: true,
					destinations: true,
				}
			});
			
			console.log(`Seeded database with event: ${event.id} - ${event.title}`);
			console.log(`Created source: ${event.sources[0].id} - ${event.sources[0].label}`);
			console.log(`Created destination: ${event.destinations[0].id} - ${event.destinations[0].label}`);
		} else {
			console.log(`Database already contains ${eventCount} events. Skipping seeding.`);
		}
	} catch (error) {
		console.error('Error seeding database:', error);
	}
}

// --- Start the Server ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
	console.log(`Server is running on http://localhost:${PORT}`);
	console.log(`API Docs available at http://localhost:${PORT}/docs`);
	console.log(`API endpoints available under http://localhost:${PORT}/api/v1`);
	
	// Seed the database if needed
	await seedDatabaseIfEmpty();
});
